package com.fangxu.dota2helper.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.fangxu.dota2helper.greendao.GreenWatchedVideo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "GREEN_WATCHED_VIDEO".
*/
public class GreenWatchedVideoDao extends AbstractDao<GreenWatchedVideo, String> {

    public static final String TABLENAME = "GREEN_WATCHED_VIDEO";

    /**
     * Properties of entity GreenWatchedVideo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Videoyoukuvid = new Property(0, String.class, "videoyoukuvid", true, "VIDEOYOUKUVID");
        public final static Property Videobackground = new Property(1, String.class, "videobackground", false, "VIDEOBACKGROUND");
        public final static Property Videotitle = new Property(2, String.class, "videotitle", false, "VIDEOTITLE");
        public final static Property Videowatchtime = new Property(3, Long.class, "videowatchtime", false, "VIDEOWATCHTIME");
        public final static Property Videoduration = new Property(4, Integer.class, "videoduration", false, "VIDEODURATION");
        public final static Property Videoplaytime = new Property(5, Integer.class, "videoplaytime", false, "VIDEOPLAYTIME");
        public final static Property VideoEnded = new Property(6, Boolean.class, "videoEnded", false, "VIDEO_ENDED");
    };


    public GreenWatchedVideoDao(DaoConfig config) {
        super(config);
    }
    
    public GreenWatchedVideoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"GREEN_WATCHED_VIDEO\" (" + //
                "\"VIDEOYOUKUVID\" TEXT PRIMARY KEY NOT NULL ," + // 0: videoyoukuvid
                "\"VIDEOBACKGROUND\" TEXT," + // 1: videobackground
                "\"VIDEOTITLE\" TEXT," + // 2: videotitle
                "\"VIDEOWATCHTIME\" INTEGER," + // 3: videowatchtime
                "\"VIDEODURATION\" INTEGER," + // 4: videoduration
                "\"VIDEOPLAYTIME\" INTEGER," + // 5: videoplaytime
                "\"VIDEO_ENDED\" INTEGER);"); // 6: videoEnded
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"GREEN_WATCHED_VIDEO\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, GreenWatchedVideo entity) {
        stmt.clearBindings();
 
        String videoyoukuvid = entity.getVideoyoukuvid();
        if (videoyoukuvid != null) {
            stmt.bindString(1, videoyoukuvid);
        }
 
        String videobackground = entity.getVideobackground();
        if (videobackground != null) {
            stmt.bindString(2, videobackground);
        }
 
        String videotitle = entity.getVideotitle();
        if (videotitle != null) {
            stmt.bindString(3, videotitle);
        }
 
        Long videowatchtime = entity.getVideowatchtime();
        if (videowatchtime != null) {
            stmt.bindLong(4, videowatchtime);
        }
 
        Integer videoduration = entity.getVideoduration();
        if (videoduration != null) {
            stmt.bindLong(5, videoduration);
        }
 
        Integer videoplaytime = entity.getVideoplaytime();
        if (videoplaytime != null) {
            stmt.bindLong(6, videoplaytime);
        }
 
        Boolean videoEnded = entity.getVideoEnded();
        if (videoEnded != null) {
            stmt.bindLong(7, videoEnded ? 1L: 0L);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public GreenWatchedVideo readEntity(Cursor cursor, int offset) {
        GreenWatchedVideo entity = new GreenWatchedVideo( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // videoyoukuvid
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // videobackground
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // videotitle
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // videowatchtime
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // videoduration
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // videoplaytime
            cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0 // videoEnded
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, GreenWatchedVideo entity, int offset) {
        entity.setVideoyoukuvid(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setVideobackground(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setVideotitle(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setVideowatchtime(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setVideoduration(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setVideoplaytime(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setVideoEnded(cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(GreenWatchedVideo entity, long rowId) {
        return entity.getVideoyoukuvid();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(GreenWatchedVideo entity) {
        if(entity != null) {
            return entity.getVideoyoukuvid();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
